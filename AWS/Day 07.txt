											AWS - Day 07 - 12-05-2025
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Amazon Web Services
=======================================================================================================
1. Elastic Block Storage (EBS)
	1.1. How to attach a new EBS Volume to an existing VM
	1.2. How to increase EBS volume size of VM
	1.3. EBS Multi-attach
	1.4. How to detach an EBS Volume from an existing VM
2. AMI Vs Snapshots
	2.1. Creating Snapshots
	2.2 Creating EBS Volumes using Snapshots
	2.3. Creating Lifecycle policy for Snapshot
3. Elastic File System
4. Automating the Start and Stop of EC2 Instances
5. Deploy NodeJS app with PM2 on AWS EC2 instance
6. Load Balancer, Auto Scaling, Launch Template

Snapshot
	- backup for EBS Volumes
AMI
	- backup for EC2 instances


10.00 AM --- EBS --- Snapshot 1 --- 100% of data will be taken as a backup
						|
						|
						|
						|
05.00 PM --- EBS --- Snapshot 2 --- The data whichever got changed only that will be taken as a backup --- Incremental Backup



------------------------------------------------------------------------
AWS Elastic File System (EFS)
------------------------------------------------------------------------
=> It provides scalable file storage for EC2 instances
=> Using EFS we can share files with multiple EC2 instances at a time
=> Create a EFS --- Attach to Instance 1 (Create 2 files) --- Attach to Instance 2 (Whatever files you have created in Instance 1, they will be available Instance 2 as well)
=> EFS is supported only for Linux based instances
=> FSx is for Windows OS





=============================
Step-1 : Create EFS in AWS
=============================

=> Login into the AWS console
=> Go to Services and select EFS under storage
=> Click on Create file system

File System ID : fs-0646683494cec8b4c

=> Launch 1 EC2 instance (Amazon Linux 2023 AMI) - Select 'default' security group

=> For the 'default' security group, Enable security Group inbound rule with "NFS" protocol with 2049 port number, Anywhere IPv4.
=> For the 'default' security group, Enable security Group inbound rule with "SSH" protocol with 22 port number, Anywhere IPv4.

=============================
Step-2 : Mounting EFS on EC2
=============================
# Login to EC2 instance and install the NFS client
$ sudo yum install -y amazon-efs-utils

# Let's create a folder where you want to mount the EFS
$ sudo mkdir efsdir

# Mount EFS Filesystem (Make sure you changed FileSystem ID)
$ sudo mount -t efs -o tls fs-0646683494cec8b4c:/ efsdir

# Change the directory to the mount point that is created above using the command:
$ cd efsdir

# Create a sample text file:
$ sudo touch f1.txt f2.txt

# Run ls command to list the contents of directory.

Lets attach these files to the second instance
==============================================================
Step-3 : Create another ec2 instance and mount EFS file system 
==============================================================
=> Launch 1 EC2 instance (Amazon Linux 2023 AMI) - Select 'default' security group
=> For the 'default' security group, Enable security Group inbound rule with "NFS" protocol with 2049 port number, Anywhere IPv4.
=> For the 'default' security group, Enable security Group inbound rule with "SSH" protocol with 22 port number, Anywhere IPv4.

# Login to 2nd EC2 instance and install the NFS client
$ sudo yum install -y amazon-efs-utils

# Let's create a folder where you want to mount the EFS.
$ sudo mkdir efsdir

# Mount EFS Filesystem (Make sure you changed FileSystem ID)
$ sudo mount -t efs -o tls fs-0646683494cec8b4c:/ efsdir

# Change the directory to the mount point that is created above using the command:
$ cd efsdir

# check the files available
$ ls 
Note : The files we have created in First EC2 instance, should display in second ec2 instance.

# Now create a file in second ec2 instance
touch Kastro.txt

# Go to instance 1 and do "ls"
You will see the file created in instance 2

Whatever files we will create in instance 1, will be available in instance 2 and vice-versa


------------------------------------------------------------------------
Automating the Start and Stop of EC2 Instances
------------------------------------------------------------------------
This work can be done in 3 ways, 1) Using Amazon EventBridge	2) AWS Lambda	3) AWS Event Scheduler (Not preferred)

In this lecture, i will demonstrate using Amazon EventBridge which is second most preferred after AWS Lambda
1. Launch Ubuntu 24.04, 64-bit ARM, t4g.micro

2. Amazon Event Bridge ----> Scheduler (leftpane) ----> Schedule groups (leftpane) ----> Create schedule group ----> Name: MyGroup, Add new tabg ----> Key: DevOps, Value: <InstanceName> ----> Create schedule group

3. Amazon Event Bridge ----> Schedule (leftpane) ----> Create schedule ----> Name: EC2Start ----> Schedule group: Select the one from drop down ----> Occurence: Recurring Schedule, Time Zone: IST ----> Schedule type: Cron-based schedule, Cron expression: 0 7 ? * 2-6 *, Flexible time window: off (Ex: If you keep 5 mins, it will take 5 extra minutes from the scheduled time to do the task) ----> Next ----> Target API: All APIs, EC2, StartInstances, Scroll down in the place of "MyData" paste the instance id ----> Next ----> Enable the toogle bar of 'Enable schedule' ----> Action after schedule completion: None ----> Retry policy: Enable the toogle bar of 'retry' (in the video this option is disabled), Max Age of Event: 24 hrs (remove this), 15 minutes, Retry attempts: 1 ----> DLO: None ----> Permissions: Goto  IAM Console (open in new tab) ----> Create role ----> Entity type: AWS Service, Usecase: CloudWatch Events ----> Next ----> You will see 2 policies attached (CloudWatchEventsBuiltInTargetExecutionAccess, CloudWatchEventsInvocationAccess) ----> Next ----> Name: StartVM ----> Create role

Open the role created ----> 'trust relationships' tab ----> Edit trust policy ----> Remove the existing one and Paste the below policy ---->
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Principal": {
        "Service": "events.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Principal": {
        "Service": "scheduler.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}

 ----> Update policy ----> 'Permissions' tab ----> Add permissions ----> attach policies ----> EC2FullAccess ----> Add permissions ----> Goback to the EventBridge tab in browser ----> Scroll down to 'Permissions' ----> Select the role create above, after refreshing ----> Next ----> Create schedule

Lets create another schedule for Stopping the VMs
4. Schedule (leftpane) ----> Create schedule ----> Name: EC2Stop ----> Schedule group: Select the one from drop down ----> Occurrence: Recurring Schedule, Time Zone: IST ----> Schedule type: Cron-based schedule, Cron expression: 0 16 ? * 2-6 *, Flexible time window: off (Ex: If you keep 5 mins, it will take 5 extra minutes from the scheduled time to do the task) ----> Next ----> Target API: All APIs, EC2, StopInstances, Scroll down in the place of "MyData" paste the instance id ----> Next ----> Enable the toogle bar of 'Enable schedule' ----> Action after schedule completion: None ----> Retry policy: Enable the toogle bar of 'retry' (in the video this option is disabled), Max Age of Event: 24 hrs (remove this), 15 minutes, Retry attempts: 1 ----> DLO: None ----> Permissions: 'Check' use existing role, Select the IAM Role created from dropdown ----> Next ----> Create schedule


-------------------------------------------------------------------------------------------
6. Load Balancer, Auto Scaling, Launch Template, Target Groups
-------------------------------------------------------------------------------------------
App		- 2 VMs ---- 1000 requests per second --- 2000 requests
		- 4 VMs ---- 2000 requests per second --- 4000 requests
		- 6 VMs ---- 4000 requests per second --- 2000 requests
		- 4 VMs ---- 2000 requests per second
		- 2 VMs ---- 1000 requests per second

Amazon - Great Indian Festival - 1000 servers (10.00 AM - 5.00 PM) (7.00 PM - 10.00 PM)
Auto Scaling ---- Increasing or Decreasing the number of instances based on the traffic that is coming to the app
		Scale up
		Scale down
In AWS, we have server metrics. These server metrics are provided by CLOUD WATCH service

If CPU Utilization > 90%, I want the instances to be increased 
If CPU Utilization < 10%, I want the instances to be decreased

Types of Autoscaling;
1. Horizontal Autoscaling
2. Vertical Autoscaling

HAS --- It is the addition of same configured servers horizontally
			t2.micro, 28 GB, Amazon Linux	
			t2.micro, 28 GB, Amazon Linux
			t2.micro, 28 GB, Amazon Linux
HAS doesn't have downtime for the app
HAS is the default one in AWS

VAS --- It is the addition of differently configured servers		
			t2.micro, 28 GB, Amazon Linux - delete
			t4.micro, 30 GB, Amazon Linux - delete
			t2.medium, 28 GB, Amazon Linux
VAS have downtime for the app
VAS is purely a manual work


VM1 - 100.100.100.100
VM2 - 100.100.100.101
VM3 - 100.100.100.102
VM4 - 100.100.100.103

All the IP addresses will be mapped to Load Balancer

What is a load balancer?
VM1 ---- VM2 ---- VM3 ---- VM4
Load balancer will distribute the traffic equally to all the available instances
Load balancer targets (VMs)
When we are configuring the Load Balancer, we have to configure the targets (ASG)
For a load balancer, we will get an URL which is called as Load Balancer URL (lengthy URL)
This load balancer URL will be configured to the custom domain (www.kastro.com) --- Route 53

Types of Load Balancers
1. Application Load Balancer (ALB) - Commonly preferred
2. Network Load Balancer (NLB)
3. Gateway Load Balancer (GLB)
4. Classic Load Balancer (Oldest - Not preferred)

While you are configuring the Auto scaling, we need to create Launch Template, Autoscaling Group
	ASG --- Minimum instances (2), Desired instances, Maximum instances (10) --- 1000 requests
While working with Load Balancer, Target Groups are created

3 types of HAS;
1. Dynamic Scaling --- based on server metric
2. Scheduled Scaling --- based on business hours
3. Predictive Scaling --- AWS itself will create/delete the instances based on ML algorithm



-------------------------------------------------------------------------
Deploy NodeJS app with PM2 on AWS EC2 instance
-------------------------------------------------------------------------
Lets see how to run a simple Node JS app using EC2 Instance
We will also create a simple index.html page in this demo

Launch VM - Amazon Linux 2 AMI, t2.micro
Connect to the VM
sudo su
You are in /home/ec2-user path

curl -sL https://rpm.nodesource.com/setup_14.x | sudo bash -

Run the following command to install nvm
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash

After installation, load nvm into your shell session:
export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

nvm --version

Install Node.js using nvm:
nvm install --lts

To see the list of nvm:
nvm ls-remote

nvm install 16

nvm use 16

node -v
npm -v

STEP 1: ADD REQUIRED REPO FROM OFFICIAL NODEJS WEBSITE.
curl -sL https://rpm.nodesource.com/setup_14.x | sudo bash -

STEP 2: INSTALL NODEJS.
sudo yum install -y nodejs

STEP 3: VERIFY INSTALLED VERSION.
node -v
npm -v

STEP 4: CREATE A server.js FILE AND RUN IT.
Create a file named server.js with the provided the below content.
Whenever we run this server.js file, it is going pick the content from index.html file and in this .js file we will also tell which protocol and port number has to be used.
The below script creates a http server which listens on Port 80 and it will read the content from index.html file and it will also send a response when someone access the server.
You can also change the port number, if required in the below content

vi server.js ----> Paste the below content ---->
const http = require('http');
const fs = require('fs');
const path = require('path');

const server = http.createServer((req, res) => {
  const filePath = path.join(__dirname, 'index.html');
  const stat = fs.statSync(filePath);

  res.writeHead(200, {
    'Content-Type': 'text/html',
    'Content-Length': stat.size,
  });

  const readStream = fs.createReadStream(filePath);
  readStream.pipe(res);
});

const PORT = 80;
server.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});

----> esc ---> :wq
this script creates a basic web server that listens on port 80, reads the content of an index.html file, and sends it as the response when a request is made to the server. The server logs a message indicating that it is running on http://localhost:80.

Lets create the index.html file
vi index.html ---> Paste the below content ---> 

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Welcome to Kastro-App-1</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      background-color: #f4f4f9;
      color: #333;
    }

    .banner {
      background-image: url('https://media.licdn.com/dms/image/v2/D5616AQEmUtBVk0Lw0Q/profile-displaybackgroundimage-shrink_350_1400/profile-displaybackgroundimage-shrink_350_1400/0/1716294939546?e=1745452800&v=beta&t=plGcHN9hOuLxuREa8Chsw4y2_muQ6vVCtaF01qGNwbE');
      background-size: cover;
      background-position: center;
      height: 200px; /* Reduced banner height */
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
    }

    .header {
      font-size: 2.5rem;
      font-weight: bold;
      text-align: center;
      margin: 20px 0;
    }

    .profile-image {
      display: block;
      margin: 0 auto;
      border-radius: 50%;
      width: 150px;
      height: 150px;
      border: 5px solid #fff;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .about-me {
      text-align: center;
      margin: 20px auto;
      max-width: 600px;
      padding: 20px;
      background-color: #fff;
      border-radius: 10px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .about-me h2 {
      font-size: 2rem;
      margin-bottom: 10px;
    }

    .about-me p {
      font-size: 1.1rem;
      line-height: 1.6;
    }

    .youtube-button {
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 20px auto;
      padding: 10px 20px;
      font-size: 1.2rem;
      color: #fff;
      background-color: #ff0000;
      border: none;
      border-radius: 5px;
      text-decoration: none;
      transition: background-color 0.3s ease;
      width: fit-content;
    }

    .youtube-button:hover {
      background-color: #cc0000;
    }

    .youtube-button img {
      width: 24px;
      height: 24px;
      margin-right: 10px;
    }

    footer {
      text-align: center;
      padding: 20px;
      background-color: #333;
      color: #fff;
      margin-top: 40px;
    }
  </style>
</head>
<body>
  <div class="header">Welcome to Kastro-App-1</div>

  <div class="banner"></div>

  <div class="content">
    <img src="https://media.licdn.com/dms/image/v2/D5603AQHJB_lF1d9OSw/profile-displayphoto-shrink_800_800/profile-displayphoto-shrink_800_800/0/1718971147172?e=1745452800&v=beta&t=TAEVuu-ImVTAJTvtMvtV4tzJV9aZM3iS4Ts1XrXAEsk" alt="Profile Image" class="profile-image">

    <div class="about-me">
      <h2>About Me</h2>
      <p><strong>Name:</strong> Kastro Kiran V</p>
      <p><strong>Role:</strong> AWS & DevOps Corporate Trainer</p>
      <p><strong>Education:</strong> PhD</p>
    </div>

    <a href="https://www.youtube.com/playlist?list=PLs-PsDpuAuTfG3gFR5DnVD58kT7JBO97x" class="youtube-button">
      <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_%282017%29.svg/1024px-YouTube_full-color_icon_%282017%29.svg.png" alt="YouTube Icon">
      DevOps Projects
    </a>
  </div>

  <footer>
    <p>&copy; 2024 Kastro-App-1. All rights reserved.</p>
  </footer>
</body>
</html>

----> esc ---> :wq

STEP 5: INSTALL REQUIRED PACKAGES / INSTALL DEPENDENCIES.
npm install

STEP 6: NODE.JS WILL INTERPRET AND EXECUTE THE CODE IN THE server.js FILE. THIS IS A COMMON PATTERN FOR RUNNING SERVER-SIDE JAVASCRIPT APPLICATIONS.
node server.js

Goto the browser and access the Public IP ---> You will see app
Make sure to open port 80 for VM

Goto Moba and press Control + c. The website gets interrupted. 
Go to the browser and refresh. You will see "This site cant be reached". This is because the app is running in interactive mode.

So we need to run this in detached mode. For this we need to work with pm2

Command to install pm2
npm install -g pm2

list all running processes/apps.
pm2 list   (or) pm ls
You will see the status as offline. This means our Node JS App is not running

Start app/services with name
pm2 start server.js --name "kastro-app1"
You will see the status as online and id as 0 and other details
Goto the browser and access the Public IP ---> You will see app

Goto Moba ---> To see the info related to the app currently running ---> pm2 show 0 (OR) pm2 show kastro-app1

Lets say you have made some code changes, to deploy the latest code changes, we will use ---> pm2 reload 0 (OR) pm2 show kastro-app1

To stop ---> pm2 stop 0 (OR) pm2 show kastro-app1
To restart ---> pm2 restart 0 (OR) pm2 show kastro-app1
To start ---> pm2 startup

Lets create one more app in the same server;
create a directory ---> mkdir myapp2 ----> cd myapp2 ----> Create server.js file. Change the port number in this file to 9090. 
Also create index.html file with some different content ----> Lets start ----> pm2 start server.js --name "kastro-app2" ---> pm2 ls ---> You will see both apps status as "online" ---> To monitor the resources ---> pm2 monit ---> select any app to see the info of that app  ---> press 'esc' to come out of the window ---> To see the logs ---> pm2 logs kastro-app1 ---> You will see the logs

Access the 2nd app in browser. Make sure to open 9090 port number


