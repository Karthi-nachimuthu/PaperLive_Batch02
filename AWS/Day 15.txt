											AWS - Day 15 - 27-05-2025
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Amazon Web Services
=======================================================================================================
AWS Projects
---------------------------
Build TicTacToe on AWS using EC2, IAM Role and DynamoDB
Dynamo DB + AWS Lambda + API Gateway
AWS Lambda
Building and Deploying a Word Press Website
Deploy NodeJS app with PM2 on AWS EC2 instance
AWS 3 Tier Architecture Project
AWS CI&CD Implementation

------------------------------------------------------------------------------------------------------------------
Project: Build TicTacToe on AWS using EC2, IAM Role and DynamoDB
------------------------------------------------------------------------------------------------------------------
Dynamo DB is a NoSQL DB where AWS will manage the backend server
Dynamo DB is serverless
In this app, all the user information will be stored in the backend DB

1. Create IAM Role 
'Check' AWS Service ---> use case: EC2, 'Check' EC2 ---> Next ---> Add 'DynamoDBFullAccess' ---> Next ---> Name: Game-Role ---> Create Role

2. Launch VM (Amazon Linux 2 AMI, t2.micro, Open Port 5000) ---> Advanced ---> IAM Instance Profile: Select the IAM Role created above, Metadata accessible: Enabled, Metadata Version: V1 and V2 (token optional) [This metadata will help us to get the metadata generated by IAM Role we have attached] ---> Launch VM

3. Connect to the VM
sudo su

Installation Steps
----------------------------
Install Development Tools and Dependencies
Installs essential development tools and libraries needed for compiling and building software.
sudo yum groupinstall -y "Development Tools"

Installs development headers and libraries for OpenSSL, bzip2, and libffi, required for Python.
sudo yum install -y openssl-devel bzip2-devel libffi-devel

Install Python 2.7.18
Downloads Python 2.7.18, extracts it, configures the build with optimizations enabled, and installs it without replacing the system-provided Python.
cd /usr/src
sudo wget https://www.python.org/ftp/python/2.7.18/Python-2.7.18.tgz
sudo tar xzf Python-2.7.18.tgz
cd Python-2.7.18
sudo ./configure --enable-optimizations
sudo make altinstall

Verify the installed Python version.
python2.7 -V

Install pip for Python 2.7
Downloads and installs pip for Python 2.7.
wget https://bootstrap.pypa.io/pip/2.7/get-pip.py
python get-pip.py

Install Python Packages
Installs Flask, Boto (for AWS SDK), and configparser Python packages using pip.
pip install Flask
pip install boto
pip install configparser

Install Git
Installs Git, a version control system.
yum install git -y

Clone the TicTacToe Project Repository
Clones the TicTacToe project repository from GitHub into the /home/ec2-user/ directory.

cd /home/ec2-user/
git clone https://github.com/KastroVKiran/DynamoDB_AWS_Project.git


After executing the above last command ---> ls ---> cd <ClonedRepoName> ---> ls ---> You will see all the files ---> We need to do some configurations ---> vi config ---> Change the region and endpoint as per the region code ---> esc ---> :wq ---> vi config.ini ---> Here also change the region ---> esc ---> :wq

Lets run the application.py file which is there inside the cloned repo
python application.py --config config.ini --mode service --endpoint dynamodb.us-east-1.amazonaws.com --serverPort 5000

Open port number 5000 for the instance

Access the app [Chrome browser] ---> <PublicIP>:5000 ---> You will see App ---> Enter any name on the top right side next to Login and click on Login ---> Click on 'Create Table' ---> Goto Dynamo DB, you will see 'Games' table. This table got created because of the setupDynamoDB.py file ---> Click on 'Games' tables ---> You dont see any items currently. Whenever we play a game, all those moves will be stored here. Lets see that practically.

Goto the browser where app is opened ---> Copy the public ip and 5000 and open the app in new browser [Firefox] (This is done because we need two players for the game) ---> Login as explained above

Goto Chrome browser ---> Click on 'Create' ---> Enter the name you have used to login in Firefox browser ---> Create game ---> Goto the Firefox browser and reload the page. You will see a request in Firefox browser. Accept it. ---> Play the game based on the 'turn' in the app. Finish the game successfully.

Lets verify the data in Dynamo DB ---> Goto Dynamo DB ---> Open the 'games'  ---> Click on 'Scan or query items' ---> 'Check' Scan ---> Click on RUN ---> You will see the details. ---> To know more details of the played game, click on the item and you can see each and every move got stored.

------------------------------------------------------------
Project: Dynamo DB + AWS Lambda + API Gateway
------------------------------------------------------------
To deliver any application we need a server. For that server we need hardware components and also we have to do many configurations.
Without the need of server we can deliver the applications using AWS Lambda.

Usually whether we are running the app inside the server or not, AWS will charge us for the instance.
In Lambda, there wont be any charges if the code is not running. But here servers will be managed by AWS itself.

Lambda supports - .net, java, node js, GO, Python, Ruby
If you have your own code with other programming languages also, we can use lambda

In Lambda we will create Lambda Functions

Dynamo DB - Acts as a database
Lambda - Acts as a webserver
API Gateway - Acts as a frontend

Whenever a customer tries to access my app the request will come to API Gateway and then it will be forwarded to Lambda and then the information user going to enter in the App, it will be stored in Dynamo DB

Demo
We have to create an IAM role to publish Lambda function. Lambda function should be able to write the data to backend Database, so we will create the IAM Role and associate to Lambda function.
IAM ---> Roles ---> Create role ---> 'Check' use case ---> User case: Lambda ---> Next ---> Permissions: AWSLambdaBasicExecutionRole, AmazonDynoamoDBFullAccess ---> Next ---> Name: lambda-role ---> Create role

Lets create lambda function ---> Lambda ---> Create function ---> 'Check' Author from scratch, Name: demo-function, Runtime: Python 3.9(8), x86_64, Change default execution role: 'Check' Choose an existing role, Select the IAM Role created above ---> Create function

Compress the zip file available in local system

Open the created function ---> 'Code' tab ---> Upload from ---> select .zip and then select the zip file in local system ---> Save ---> Once after successfully uploaded the code, you will see the code in the 'Code' tab

Lets create Dynamo DB table ---> 'Tables' (leftpane) ---> Create table ---> Name: Give the table name as available in the code (in the file 'lambda_function.py'). The table name in the .py file is 'kastrotable' ---> Partition key: Email, String, Table settings: default settings ---> Create table
Open the dynamodb table created ---> 'Explore items' (left pane) ---> You will see 'No items to display' 

API Gateway ----> APIs (leftpane) -----> Lets configure API Gateway ---> Scroll down to 'Rest API' ---> Build ---> 'Check' New API, API Name: demo-api, API Endpoint type: regional ---> Create API
Open the API created ---> Create method ---> Method type: GET, Integration type: Lambda Function, Enable the toogle bar of 'Lambda proxy integration' ---> Lambda function: Select the region in which you have created the lambda function, select the lambda function created, Enable the toogle bar of 'default timeout' ---> Create method 
Open the API created ---> Create method ---> Method type: POST, Integration type: Lambda Function, Enable the toogle bar of 'Lambda proxy integration' ---> Lambda function: Select the region in which you have created the lambda function, select the lambda function created, Enable the toogle bar of 'default timeout' ---> Create method 
We have now created required API calls and now we are ready to deploy the API calls ---> Click on 'Deploy API' ---> Stage: New stage, Name: dev-1 ---> Deploy ---> You can see an 'Invoke URL' ---> Copy that URL and paste in new tab of browser ---> You will see the app ---> Enter the data in the app

To check the data in the app, goto Dynamo DB ---> Open the database created ---> Tables (leftpane) ---> Explore items (left pane) ---> Select the table ---> click on Refresh icon ---> You will see the data entered in the app


============
Project: AWS Lambda
============
Demo;
AWS Lambda ----> Functions (left pane) ----> Create functions ----> 'Check' use blueprint (If you know everything, i.e. advanced level of Lambda, then we can 'check' author from scratch) ----> Blueprint Name: search for 'canary' and select Python 3.10 version ----> Function Name: demo ----> Runtime: Python 3.10 ----> Execution role: Create a new role with basic Lambda permissions (when we select this what will happen is, when we trigger Lambda functions, automatically in the backend CloudWatch Log Group will get created) ----> {{ Event Bridge trigger: Rule: 'check' Create new rule, Rule name: demo-rule, Rule description: every 5 minutes, Rule type: 'Check' Schedule expression: rate(5 minutes) [Here every 5 minutes lambda function will get triggered). Here i dont create the rule now, after creating the Function, i will go to Event Bridge console and will configure }} ----> Environment variables: Key-site, Value-https://www.google.com/, Key-Expected, Value-Gmail ----> Encryption configuration: AWS KMS Key to encrypt at rest: 'check' default aws/lambda ----> Create function

You will see the function now ----> Go inside the function ----> Scroll down to 'test' tab ----> Click on 'Test' ----> Click on 'details' to see details ----> Test event action: Create new event, Event name: test-demo ----> Save ----> Test ----> Click on 'details' to see details 

AWS Lambda charges based on the size of code, how much time we have run the code, memory configured for the code, when a request came how much memory is utilized, when a request came how much code ran.

All the logs of this will be stored in CloudWatch Log Groups ----> Goto CloudWatch ----> Log Groups (left pane) ----> Log streams tab ----> Click on the log created to see the details of logs

In AWS Lambda, it is important to understand some configurations ----> Goto Lambda console ----> Open Lambda function created ----> 'Configuration' tab ----> You can see the default timeout as 10 seconds. This time out indicates, to run the code it will take 10 seconds, but in any case if the code doesn't get run within 10 seconds, then we will face timeout. If we dont want this timeout, we can configure. ----> Edit ----> Timeout: 15 min (This is the maximum given by AWS. We cannot change beyond this. Whatever is the size of code, it should run within 15 minutes.)
Another configuration is memory ----> When we are running default lambda functions, we will get 128 MB memory ----> Edit ----> Memory: 512 MB (we can configure memory between 512 MB to 10240 MB). Remember if i know 10240 MB, AWS wont charge for 10240 MB, it will charge only for the memory utilized to run the code.

For the Lambda supported languages, AWS also provides code editor. Or we can also write the code in our laptop and then we have to zip the code and upload the code. Or, we can keep the code in S3 bucket and upload the code via S3 bucket ----> Goto 'Code' tab ----> Right top side you will see "Upload from". But remember, for the role whichever 0we have configured for that role we have to give 'S3BucketGet' permission

We can also modify or update the code in the Lambda ----> Goto 'Code' tab ----> Modify the code and then click on 'Deploy' to deploy the latest changes ----> Click on 'test'. You can see the changes.

So far we have manually triggered and manually tested, we can add trigger point to automate this. Click on "Add Trigger" ----> Trigger Configuration: Select source: S3, Bucket: Select any bucket, Event types: PUT (whenever an object uploaded in to the s3 bucket, Lambda function will get triggered) ----> Add (Dont do it now)

To trigger the function periodically ----> Goto Event Bridge console ----> Buses (left pane) ----> Rule (leftpane) ----> Event bus: default, Create rule ----> Name: demo-rule, Event bus: default, Enable the toogle bar, Rule type: 'check' Schedule ----> Continue to create rule ----> 'Checl' A rule that runs at a regular rate, such as every 10 minutes, rate: 2 minutes ----> Next ----> Target ----> Target types: AWS Service, Select a target: Lambda function, Function: Select the lambda function created previously ----> Next ----> Next ----> Create rule

Goto Lambda console and refresh the page. You will see the trigger function
You can also verify the triggers in  ----> Goto 'Configuration' tab ----> Goto 'triggers' (leftpane) ----> You can see the trigger added. So every 2 minutes the code will get triggered


---------------------------------------------------------------------
Project: Building and Deploying a Word Press Website
---------------------------------------------------------------------
Services Used:
	EC2 (Frontend), RDS (Backend), Using default VPC

Step 1.
Lets create the DB for the DB Deployment ----> Databases (left pane) ----> Create DB ----> Standard Create, MySQL, Edition: MySQL Community, Engine Version: MySQL8.0.35, Templates: Free Tier, DB Instance Identifier: database-1, Master Username: admin, Credentials Management: Self Managed, Master Password: <Type Password> (Here i will keep password as kastro2025) and Retype to Confirm, Instance Configuration: Turn off the toggle bars for 'Show instance classes....' and 'Include previous gen classes', db.t4g.micro, Storage type: gp2, Storage: 20, Storage Autoscaling: 'Uncheck' enable autoscaling, Connectivity: Compute Resource: Dont Connect to EC2 Compute Resource, Network Type: IPv4, VPC: default-vpc, DB Subnet Group: Default, Public Access: No, VPC SG: Create new: New SG Name: wordpress-SG, AZ: No preference, Additional Configuration: 3306, Database Authentication: Password Authentication, Monitoring: 'Uncheck' Turn on performance insights ----> Additional configuration: Initial DB Name: <LeaveItBlank>, DB Parameter Group: default.mysql8.0, Option group: default.mysql8.0, Backup: 'Uncheck' Enable automatic backup (But in real-time it is highly recommended to have DB backup. Here to avoid charges im not checking), Maintenance: 'Uncheck' Enable Auto minor version upgrade ----> Create DB (You will see 1 db got created). Wait for sometime till it gets created.

While creating the DB instance, we have selected to create a new SG. that new SG will have the port number 3306 which is the default port number for MySQL.

Step 1.1.
To verify; VPC ----> goto Security Group (Left pane) ----> Open "wordpress-SG" ----> Check the port 3306 in the inbound rules. But check the source (you will see an IP, which is the currently connected network)
We will modify this SG in sometime

Step 2.
Launch Amazon Linux 2 AMI, Select the existing keypair, t2.micro, create new security group (open HTTP traffic) SG Name: wp-web-server-sg.
In this instance we will install LAMP (Linux, Apache, MySQL, PHP) stack

Goto the Step 1.1. ----> Open SG of RDS instance i.e (wordpress-SG) ----> Edit inbound rules ----> Add rules ----> Type: MySQL/Aurora, TCP, 3306, sg: select 'wp-web-server-sg'
(OR)
Copy the private IP of EC2 instance created ----> Open SG of RDS instance i.e (wordpress-SG) ----> Edit inbound rules ----> Add rules ----> Type: MySQL/Aurora, TCP, 3306, Source: Anywhere IPv4: "Private IP of VM"

If this adjustment is not done, we cannot connect to the database in RDS instance

Step 2.1. Installation of MySQL Client and Creation of Database
Connect to the VM ----> sudo su ----> sudo yum install -y mysql (The reason for installing mysql client is, whatever the RDS we have created we have to connect to it and prepare a database for wordpress website and then we will create an user and we will give permissions for that user to access the 'wordpress' database. We can also use the admin user here, but admin user will have all previlages, so its not recommended to use at application level)

Export mysql endpoint.
--> export MYSQL_HOST=<RDS-EndPoint>
Ex: export MYSQL_HOST=database-2.cl6qmemowe62.ap-south-1.rds.amazonaws.com
Connect to mysql to create a db user

mysql -h <RDS-EndPoint> -P 3306 -u admin -p
Ex: mysql -h database-2.cl6qmemowe62.ap-south-1.rds.amazonaws.com -P 3306 -u admin -p
(In the above -h is hostname, -P is port number, -u is the Username, -p is password)
Enter the password you have created while creating the RDS i.e kastro@2025

CREATE DATABASE wordpress;
(In the above the database name we are creating is 'wordpress'

CREATE USER 'kastro' IDENTIFIED BY 'kastro@2025';

GRANT ALL PRIVILEGES ON wordpress.* TO kastro;
In the above, for the user called 'kastro' i'm telling to provide all the permission for the database which we have created i.e. 'wordpress'

FLUSH PRIVILEGES;
Since we have modified the permissions, it is recommended to flush the privileges.

Exit

Step 2.2. Installation of Apache

sudo yum install -y httpd
sudo service httpd start
chkconfig httpd on (To make it as a logon service)

To check whether apache has been installed or not ----> Paste the public ip of VM in new tab ----> You should see Apache test page (Make sure to open Port Number 80 for EC2 Instance SG)

Download and unzip the wordpress template
wget https://wordpress.org/latest.tar.gz
tar -xzf latest.tar.gz

$ ls
You will see below files i.e zipped file and unzipped file
latest.tar.gz 
wordpress

cd wordpress
 
create a wp-config file from sample file already provided

cp wp-config-sample.php wp-config.php
(Renamed the file "wp-config-sample.php" as "wp-config.php")

edit the wp-config.php file to point to database
--> vim wp-config.php ---> You will see below content. Modify it accordingly;

// ** Database settings - You can get this info from your web host ** //

/** The name of the database for WordPress */
define('DB_NAME', 'database_name_here');

/** MySQL database username */
define('DB_USER', 'username_here');

/** MySQL database password */
define('DB_PASSWORD', 'password_here');

/** MySQL hostname */
define('DB_HOST', 'rds-endpoint-name');

In the above the 'database_name_here' is 'wordpress'
'username_here' is 'kastro' which is the wordpress user created 
'password_here' is kastro2025
'rds-endpoint-name' is provide the end point of RDS instance

after editing the above, Scroll down in the same page till you find the link as shown below;
Copy and paste the link in browser;
Now go to this link and it provides some information to update the same file. It looks like below shared one.

Change these to different unique phrases! You can generate these using the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service}.
Paste the above link in browser as shown below (dont paste the complete link)
https://api.wordpress.org/secret-key/1.1/salt/

You will see the information, copy it and paste in the above file opened using vim in the place of the text you will see something similar as below;
define('AUTH_KEY',         '$kA;Zae|`+u9D NUCnL@=C7I,}BAR`-H4d5G[~O+8h3NY1J6;|>a-rnW48 `%Mi6');
define('SECURE_AUTH_KEY',  '4)[&^O YRN^xy@R: xLva6b,gQ&oFc5bY70L3q=+pT=GY:EQ,0Vqia}R}EzR:&||');
define('LOGGED_IN_KEY',    '$zF/n8`hJd^D+ZN05p>7p5oo6Nd|5s7$O5T2If~x~Y{WlQ-Rv#5YbO>^gtb)AVjO');
define('NONCE_KEY',        'ZeGfFsjH-3gzlO%g)8H |bK%g S8Q!9Q1rsDhEL*n3UU&]hq7uO)=leU6;Cvj7[(');
define('AUTH_SALT',        '}-zvaE<XDx%wB/z!M]QdMPpgOzN9:YzZx_,C{8~nne9xhGX60dZwKjh-i=|h&C86');
define('SECURE_AUTH_SALT', 'YuUNLM0fhD,;<nr$J/.FeJ+d[[nEt!UWw2|8l9wS)SECG42@^Mjd<Ua~bZK?O)[/');
define('LOGGED_IN_SALT',   'R883&$l-.?%`eJn/9`dh{|NKh-_OcF}+4a^KM<(Wbi<|]4C+Sc#+*4QW~=ty:JkC');
define('NONCE_SALT',       'RLKs$-ry b/!|N>73,T*wyKX5ILu;@nTaA?PMNip0L5|u^l*r>*g1y-wK/;oe2nl');

---> esc ----> : wq

The above files are in php format. So lets install php in the VM
sudo amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2 

cd /home/ec2-user
ls ----> You will see the zip file and wordpress directory

sudo cp -r wordpress/* /var/www/html/

cd /var/www/html

sudo service httpd restart

Get your instance public IP and Paster it in browser, It should give you wordpress initial configuration page.

Fill the details in the wordpress configuration page ---> 'Check' discourage search engines from indexing this site. ---> After clicking on 'install wordpress' you will see the success message ---> If you see any error, it because of either php installation or the connectivity to the database -----> Click on 'login' ----> Give the login and password for wordpress ---> You will be in the admin dashboard of wordpress template

Copy the IP of VM and paste in new tab. You will see the wordpress blog. To edit the blog, go to the admin dashboard and change the things accordingly. Lets say i want to change the theme; Appearances (left pane) ---> Select themes

-------------------------------------------------------------------------
Project: Deploy NodeJS app with PM2 on AWS EC2 instance
-------------------------------------------------------------------------
Lets see how to run a simple Node JS app using EC2 Instance
We will also create a simple index.html page in this demo

Launch VM - Amazon Linux 2 AMI, t2.micro
Connect to the VM
sudo su
You are in /home/ec2-user path

curl -sL https://rpm.nodesource.com/setup_14.x | sudo bash -

Run the following command to install nvm
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash

After installation, load nvm into your shell session:
export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

nvm --version

Install Node.js using nvm:
nvm install --lts

To see the list of nvm:
nvm ls-remote

nvm install 16

nvm use 16

node -v
npm -v

STEP 1: ADD REQUIRED REPO FROM OFFICIAL NODEJS WEBSITE.
curl -sL https://rpm.nodesource.com/setup_14.x | sudo bash -

STEP 2: INSTALL NODEJS.
sudo yum install -y nodejs

STEP 3: VERIFY INSTALLED VERSION.
node -v
npm -v

STEP 4: CREATE A server.js FILE AND RUN IT.
Create a file named server.js with the provided the below content.
Whenever we run this server.js file, it is going pick the content from index.html file and in this .js file we will also tell which protocol and port number has to be used.
The below script creates a http server which listens on Port 80 and it will read the content from index.html file and it will also send a response when someone access the server.
You can also change the port number, if required in the below content

vi server.js ----> Paste the below content ---->
const http = require('http');
const fs = require('fs');
const path = require('path');

const server = http.createServer((req, res) => {
  const filePath = path.join(__dirname, 'index.html');
  const stat = fs.statSync(filePath);

  res.writeHead(200, {
    'Content-Type': 'text/html',
    'Content-Length': stat.size,
  });

  const readStream = fs.createReadStream(filePath);
  readStream.pipe(res);
});

const PORT = 80;
server.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});

----> esc ---> :wq
this script creates a basic web server that listens on port 80, reads the content of an index.html file, and sends it as the response when a request is made to the server. The server logs a message indicating that it is running on http://localhost:80.

Lets create the index.html file
vi index.html ---> Paste the below content ---> 

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Welcome to Kastro-App-1</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      background-color: #f4f4f9;
      color: #333;
    }

    .banner {
      background-image: url('https://media.licdn.com/dms/image/v2/D5616AQEmUtBVk0Lw0Q/profile-displaybackgroundimage-shrink_350_1400/profile-displaybackgroundimage-shrink_350_1400/0/1716294939546?e=1745452800&v=beta&t=plGcHN9hOuLxuREa8Chsw4y2_muQ6vVCtaF01qGNwbE');
      background-size: cover;
      background-position: center;
      height: 200px; /* Reduced banner height */
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
    }

    .header {
      font-size: 2.5rem;
      font-weight: bold;
      text-align: center;
      margin: 20px 0;
    }

    .profile-image {
      display: block;
      margin: 0 auto;
      border-radius: 50%;
      width: 150px;
      height: 150px;
      border: 5px solid #fff;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .about-me {
      text-align: center;
      margin: 20px auto;
      max-width: 600px;
      padding: 20px;
      background-color: #fff;
      border-radius: 10px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .about-me h2 {
      font-size: 2rem;
      margin-bottom: 10px;
    }

    .about-me p {
      font-size: 1.1rem;
      line-height: 1.6;
    }

    .youtube-button {
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 20px auto;
      padding: 10px 20px;
      font-size: 1.2rem;
      color: #fff;
      background-color: #ff0000;
      border: none;
      border-radius: 5px;
      text-decoration: none;
      transition: background-color 0.3s ease;
      width: fit-content;
    }

    .youtube-button:hover {
      background-color: #cc0000;
    }

    .youtube-button img {
      width: 24px;
      height: 24px;
      margin-right: 10px;
    }

    footer {
      text-align: center;
      padding: 20px;
      background-color: #333;
      color: #fff;
      margin-top: 40px;
    }
  </style>
</head>
<body>
  <div class="header">Welcome to Kastro-App-1</div>

  <div class="banner"></div>

  <div class="content">
    <img src="https://media.licdn.com/dms/image/v2/D5603AQHJB_lF1d9OSw/profile-displayphoto-shrink_800_800/profile-displayphoto-shrink_800_800/0/1718971147172?e=1745452800&v=beta&t=TAEVuu-ImVTAJTvtMvtV4tzJV9aZM3iS4Ts1XrXAEsk" alt="Profile Image" class="profile-image">

    <div class="about-me">
      <h2>About Me</h2>
      <p><strong>Name:</strong> Kastro Kiran V</p>
      <p><strong>Role:</strong> AWS & DevOps Corporate Trainer</p>
      <p><strong>Education:</strong> PhD</p>
    </div>

    <a href="https://www.youtube.com/playlist?list=PLs-PsDpuAuTfG3gFR5DnVD58kT7JBO97x" class="youtube-button">
      <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_%282017%29.svg/1024px-YouTube_full-color_icon_%282017%29.svg.png" alt="YouTube Icon">
      DevOps Projects
    </a>
  </div>

  <footer>
    <p>&copy; 2024 Kastro-App-1. All rights reserved.</p>
  </footer>
</body>
</html>

----> esc ---> :wq

STEP 5: INSTALL REQUIRED PACKAGES / INSTALL DEPENDENCIES.
npm install

STEP 6: NODE.JS WILL INTERPRET AND EXECUTE THE CODE IN THE server.js FILE. THIS IS A COMMON PATTERN FOR RUNNING SERVER-SIDE JAVASCRIPT APPLICATIONS.
node server.js

Goto the browser and access the Public IP ---> You will see app
Make sure to open port 80 for VM

Goto Moba and press Control + c. The website gets interrupted. 
Go to the browser and refresh. You will see "This site cant be reached". This is because the app is running in interactive mode.

So we need to run this in detached mode. For this we need to work with pm2

Command to install pm2
npm install -g pm2

list all running processes/apps.
pm2 list   (or) pm ls
You will see the status as offline. This means our Node JS App is not running

Start app/services with name
pm2 start server.js --name "kastro-app1"
You will see the status as online and id as 0 and other details
Goto the browser and access the Public IP ---> You will see app

Goto Moba ---> To see the info related to the app currently running ---> pm2 show 0 (OR) pm2 show kastro-app1

Lets say you have made some code changes, to deploy the latest code changes, we will use ---> pm2 reload 0 (OR) pm2 show kastro-app1

To stop ---> pm2 stop 0 (OR) pm2 show kastro-app1
To restart ---> pm2 restart 0 (OR) pm2 show kastro-app1
To start ---> pm2 startup

Lets create one more app in the same server;
create a directory ---> mkdir myapp2 ----> cd myapp2 ----> Create server.js file. Change the port number in this file to 9090. 
Also create index.html file with some different content ----> Lets start ----> pm2 start server.js --name "kastro-app2" ---> pm2 ls ---> You will see both apps status as "online" ---> To monitor the resources ---> pm2 monit ---> select any app to see the info of that app  ---> press 'esc' to come out of the window ---> To see the logs ---> pm2 logs kastro-app1 ---> You will see the logs

Access the 2nd app in browser. Make sure to open 9090 port number

--------------------------------------------------------------------------------------------------------------
NACLs Vs SG
--------------------------------
NACL - Network Access Control List
SG - Security Group

NACL works at instance level, subnet level
SG works at resource level

For every network, NACL and SG will act as firewalls


VM --- Public Subnet ---- Public RT --- IGW

Inbound traffic --- is where the request goes from the user to the server
Outbound traffic --- is where the response will go from server to user

NACL & SG both inbound and outbound rules should be there

For one EC2 VM, we can attach 5 different SGs
In each SG, we can have a maximum of 60 rules

For 1 subnet we can attach only 1 NACL















